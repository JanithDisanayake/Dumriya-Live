openapi: 3.0.0
info:
  title: User API
  version: 1.0.0
  description: API for user operations

paths:
  /users:
    get:
      summary: Get all users
      tags: 
        - Users
      security:
        - bearerAuth: []
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Hi from GET users"
        "401":
          description: Unauthorized
          content:
            text/plain:
              schema:
                type: string
                example: "Access denied"
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: "Invalid token"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error message"

  /users/login:
    post:
      summary: User login
      tags: 
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "user1"
                password:
                  type: string
                  example: "password123"
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "jwt-token"
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: "User not found"

  /users/register:
    post:
      summary: User registration
      tags: 
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: "newuser"
                password:
                  type: string
                  example: "newpassword123"
      responses:
        "201":
          description: User registered successfully
          content:
            text/plain:
              schema:
                type: string
                example: "User registered successfully"
        "400":
          description: Bad Request
          content:
            text/plain:
              schema:
                type: string
                example: "Username and password are required"

  /trains:
    get:
      tags:
        - Trains
      summary: Get all trains
      responses:
        '200':
          description: A list of trains
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Train'
    post:
      tags:
        - Trains
      summary: Register a new train
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Train'
      responses:
        '201':
          description: Train registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Train'
  /trains/{id}:
    get:
      tags:
        - Trains
      summary: Get train by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The train ID
      responses:
        '200':
          description: Train found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Train'
        '404':
          description: Train not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Train not found
    put:
      tags:
        - Trains
      summary: Update a train
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The train ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Train'
      responses:
        '200':
          description: Train updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Train'
        '404':
          description: Train not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Train not found
  /trains/live:
    get:
      tags:
        - Trains
      summary: Get live train data
      responses:
        '200':
          description: A list of live train data
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrainLive'
    post:
      tags:
        - Trains
      summary: Store live train data
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainLive'
      responses:
        '201':
          description: Live train data stored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainLive'
  /trains/live/{id}:
    get:
      tags:
        - Trains
      summary: Get live train data by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The train ID
      responses:
        '200':
          description: Live train data found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainLive'
        '404':
          description: Live train data not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: TrainLive not found
  /trains/live_log:
    get:
      tags:
        - Trains
      summary: Get live train logs
      responses:
        '200':
          description: A list of live train logs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TrainLiveLog'
    post:
      tags:
        - Trains
      summary: Store live train log
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrainLiveLog'
      responses:
        '201':
          description: Live train log stored
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrainLiveLog'

  /stations:
    get:
      summary: Get all stations
      description: Retrieve a list of all train stations
      tags:
        - Stations
      responses:
        '200':
          description: A list of stations
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Station'
        '500':
          description: Internal server error
    post:
      summary: Register a new station
      description: Create a new train station
      tags:
        - Stations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StationInput'
      responses:
        '201':
          description: Station created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Station'
        '400':
          description: Bad request
        '500':
          description: Internal server error

  /routes:
    get:
      tags:
        - Routes
      summary: Get all routes
      description: Retrieve a list of all train routes
      responses:
        '200':
          description: A list of routes
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
    post:
      tags:
        - Routes
      summary: Register a new route
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '201':
          description: Route registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
  /routes/{id}:
    get:
      tags:
        - Routes
      summary: Get route by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The route ID
      responses:
        '200':
          description: Route found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Route not found
    put:
      tags:
        - Routes
      summary: Update a route
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The route ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '200':
          description: Route updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
        '404':
          description: Route not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Route not found
  /schedules:
    get:
      tags:
        - Schedules
      summary: Get all schedules
      responses:
        '200':
          description: A list of schedules
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
    post:
      tags:
        - Schedules
      summary: Register a new schedule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
      responses:
        '201':
          description: Schedule registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
  /schedules/{id}:
    get:
      tags:
        - Schedules
      summary: Get schedule by ID
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The schedule ID
      responses:
        '200':
          description: Schedule found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Schedule not found
    put:
      tags:
        - Schedules
      summary: Update a schedule
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          description: The schedule ID
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Schedule'
      responses:
        '200':
          description: Schedule updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Schedule'
        '404':
          description: Schedule not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Schedule not found


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Train:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the train
        name:
          type: string
          description: The name of the train
        type:
          type: string
          description: The type of the train (e.g., cargo, passenger)
      required:
        - name
        - type
    TrainInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the train
        type:
          type: string
          description: The type of the train (e.g., cargo, passenger)
      required:
        - name
        - type
    TrainLive:
      type: object
      properties:
        train:
          $ref: '#/components/schemas/Train'
        current_location:
          $ref: '#/components/schemas/GeoLocation'
        previous_station:
          $ref: '#/components/schemas/Station'
        next_station:
          $ref: '#/components/schemas/Station'
      required:
        - train
        - current_location
    TrainLiveLog:
      type: object
      properties:
        device:
          $ref: '#/components/schemas/Device'
        current_location:
          $ref: '#/components/schemas/GeoLocation'
        reported_time:
          type: string
          format: date-time
          description: The time the log was reported
      required:
        - device
        - current_location
        - reported_time
    Station:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the station
        name:
          type: string
          description: The name of the station
        location:
          $ref: '#/components/schemas/GeoLocation'
          description: The geographical location of the station
      required:
        - name
        - location
    StationInput:
      type: object
      properties:
        name:
          type: string
          description: The name of the station
        location:
          $ref: '#/components/schemas/GeoLocation'
          description: The geographical location of the station
      required:
        - name
        - location
    Route:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier for the route
        start:
          $ref: '#/components/schemas/Station'
          description: The starting station of the route
        end:
          $ref: '#/components/schemas/Station'
          description: The ending station of the route
        distance:
          type: number
          description: The distance of the route in kilometers
        stations:
          type: array
          items:
            $ref: '#/components/schemas/Station'
          description: An array of stations along the route
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/GeoLocation'
          description: The geographical coordinates of the route
      required:
        - start
        - end
        - coordinates
    RouteInput:
      type: object
      properties:
        start:
          $ref: '#/components/schemas/StationInput'
          description: The starting station of the route
        end:
          $ref: '#/components/schemas/StationInput'
          description: The ending station of the route
        distance:
          type: number
          description: The distance of the route in kilometers
        stations:
          type: array
          items:
            $ref: '#/components/schemas/StationInput'
          description: An array of stations along the route
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/GeoLocation'
          description: The geographical coordinates of the route
      required:
        - start
        - end
        - coordinates
    Device:
      type: object
      properties:
        id:
          type: string
          format: objectId
          description: The unique identifier for the device
        role:
          type: string
          enum:
            - Engine
            - Mobile
          description: The role of the device
        status:
          type: boolean
          description: The status of the device
      required:
        - role
        - status
    GeoLocation:
      type: object
      properties:
        type:
          type: string
          enum:
            - Point
          description: The type of GeoLocation, must be "Point"
          example: Point
        coordinates:
          type: array
          items:
            type: number
          description: The coordinates of the GeoLocation as an array of two numbers (longitude and latitude)
          example: [-73.856077, 40.848447]
      required:
        - type
        - coordinates